import pygame
from pygame import Vector2
from pygame.surface import Surface

from moon_lander import settings
from moon_lander.ai import AIController
from moon_lander.landing_zone import LandingZone
from moon_lander.objects import PhysicalObject
from moon_lander.utils import random_vector2


class Lander(PhysicalObject):
    """ Game object representing lander """

    def __init__(self, landing: LandingZone, pos: Vector2 = None):
        if not pos:
            pos = random_vector2(*settings.LANDER_STARTING_BOX)

        super().__init__(pos, *settings.LANDER_SIZE)

        self.landing = landing

        self.left_thruster = 0
        self.right_thruster = 0
        self.bottom_thruster = 0

    def update(self, delta: int):
        """ Updates game logic by handling physics and collisions detection """

        # calculate current force generated by thrusters
        self.force = Vector2(
            settings.SIDE_THRUSTERS_STRENGTH * (self.left_thruster - self.right_thruster),
            -settings.BOTTOM_THRUSTER_STRENGTH * self.bottom_thruster
        )

        # update physics
        super().update(delta)

    def draw(self, surface: Surface):
        super().draw(surface)

        b = self.bounds
        s = settings.LANDER_THRUSTER_SIZE
        # left thruster
        pygame.draw.line(surface, pygame.Color('red'), b.midleft, (b.midleft[0] - self.left_thruster * s, b.midleft[1]))
        # right thruster
        pygame.draw.line(surface, pygame.Color('red'), b.midright, (b.midright[0] + self.right_thruster * s, b.midright[1]))
        # bottom thruster
        pygame.draw.line(surface, pygame.Color('red'), b.midbottom, (b.midbottom[0], b.midbottom[1] + self.bottom_thruster * s))


class PlayerLander(Lander):
    """ Lander extended with support for player controls """

    def update(self, delta: int):
        keys = pygame.key.get_pressed()

        # set thrusters according to player input
        self.bottom_thruster = keys[settings.CONTROL_THRUSTER_BOTTOM]
        self.right_thruster = keys[settings.CONTROL_THRUSTER_RIGHT]
        self.left_thruster = keys[settings.CONTROL_THRUSTER_LEFT]

        # update physics
        super().update(delta)


class AILander(Lander):
    """ Lander extended with AI driven controls"""

    def __init__(self, landing: LandingZone, controller: AIController, pos: Vector2 = None):
        super().__init__(landing, pos)

        self._controller = controller

    def update(self, delta: int):

        # provide data for ai controller
        self._controller.input(self.position, self.speed, self.landing.position)

        # set thrusts
        # self.bottom_thruster = self._controller.get_vertical_thrust()
        self.bottom_thruster = 0.5
        self.right_thruster = -min(0, self._controller.get_horizontal_thrust())
        self.left_thruster = max(0, self._controller.get_horizontal_thrust())

        # update physics
        super().update(delta)
